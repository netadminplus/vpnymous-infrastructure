# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from app.marznode import marznode_pb2 as app_dot_marznode_dot_marznode__pb2

GRPC_GENERATED_VERSION = '1.65.4'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in app/marznode/marznode_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class MarzServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SyncUsers = channel.stream_unary(
                '/marznode.MarzService/SyncUsers',
                request_serializer=app_dot_marznode_dot_marznode__pb2.UserData.SerializeToString,
                response_deserializer=app_dot_marznode_dot_marznode__pb2.Empty.FromString,
                _registered_method=True)
        self.RepopulateUsers = channel.unary_unary(
                '/marznode.MarzService/RepopulateUsers',
                request_serializer=app_dot_marznode_dot_marznode__pb2.UsersData.SerializeToString,
                response_deserializer=app_dot_marznode_dot_marznode__pb2.Empty.FromString,
                _registered_method=True)
        self.FetchBackends = channel.unary_unary(
                '/marznode.MarzService/FetchBackends',
                request_serializer=app_dot_marznode_dot_marznode__pb2.Empty.SerializeToString,
                response_deserializer=app_dot_marznode_dot_marznode__pb2.BackendsResponse.FromString,
                _registered_method=True)
        self.FetchUsersStats = channel.unary_unary(
                '/marznode.MarzService/FetchUsersStats',
                request_serializer=app_dot_marznode_dot_marznode__pb2.Empty.SerializeToString,
                response_deserializer=app_dot_marznode_dot_marznode__pb2.UsersStats.FromString,
                _registered_method=True)
        self.FetchBackendConfig = channel.unary_unary(
                '/marznode.MarzService/FetchBackendConfig',
                request_serializer=app_dot_marznode_dot_marznode__pb2.Backend.SerializeToString,
                response_deserializer=app_dot_marznode_dot_marznode__pb2.BackendConfig.FromString,
                _registered_method=True)
        self.RestartBackend = channel.unary_unary(
                '/marznode.MarzService/RestartBackend',
                request_serializer=app_dot_marznode_dot_marznode__pb2.RestartBackendRequest.SerializeToString,
                response_deserializer=app_dot_marznode_dot_marznode__pb2.Empty.FromString,
                _registered_method=True)
        self.StreamBackendLogs = channel.unary_stream(
                '/marznode.MarzService/StreamBackendLogs',
                request_serializer=app_dot_marznode_dot_marznode__pb2.BackendLogsRequest.SerializeToString,
                response_deserializer=app_dot_marznode_dot_marznode__pb2.LogLine.FromString,
                _registered_method=True)
        self.GetBackendStats = channel.unary_unary(
                '/marznode.MarzService/GetBackendStats',
                request_serializer=app_dot_marznode_dot_marznode__pb2.Backend.SerializeToString,
                response_deserializer=app_dot_marznode_dot_marznode__pb2.BackendStats.FromString,
                _registered_method=True)


class MarzServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SyncUsers(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RepopulateUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchBackends(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchUsersStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchBackendConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestartBackend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamBackendLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBackendStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarzServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SyncUsers': grpc.stream_unary_rpc_method_handler(
                    servicer.SyncUsers,
                    request_deserializer=app_dot_marznode_dot_marznode__pb2.UserData.FromString,
                    response_serializer=app_dot_marznode_dot_marznode__pb2.Empty.SerializeToString,
            ),
            'RepopulateUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.RepopulateUsers,
                    request_deserializer=app_dot_marznode_dot_marznode__pb2.UsersData.FromString,
                    response_serializer=app_dot_marznode_dot_marznode__pb2.Empty.SerializeToString,
            ),
            'FetchBackends': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchBackends,
                    request_deserializer=app_dot_marznode_dot_marznode__pb2.Empty.FromString,
                    response_serializer=app_dot_marznode_dot_marznode__pb2.BackendsResponse.SerializeToString,
            ),
            'FetchUsersStats': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchUsersStats,
                    request_deserializer=app_dot_marznode_dot_marznode__pb2.Empty.FromString,
                    response_serializer=app_dot_marznode_dot_marznode__pb2.UsersStats.SerializeToString,
            ),
            'FetchBackendConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchBackendConfig,
                    request_deserializer=app_dot_marznode_dot_marznode__pb2.Backend.FromString,
                    response_serializer=app_dot_marznode_dot_marznode__pb2.BackendConfig.SerializeToString,
            ),
            'RestartBackend': grpc.unary_unary_rpc_method_handler(
                    servicer.RestartBackend,
                    request_deserializer=app_dot_marznode_dot_marznode__pb2.RestartBackendRequest.FromString,
                    response_serializer=app_dot_marznode_dot_marznode__pb2.Empty.SerializeToString,
            ),
            'StreamBackendLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamBackendLogs,
                    request_deserializer=app_dot_marznode_dot_marznode__pb2.BackendLogsRequest.FromString,
                    response_serializer=app_dot_marznode_dot_marznode__pb2.LogLine.SerializeToString,
            ),
            'GetBackendStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBackendStats,
                    request_deserializer=app_dot_marznode_dot_marznode__pb2.Backend.FromString,
                    response_serializer=app_dot_marznode_dot_marznode__pb2.BackendStats.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'marznode.MarzService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('marznode.MarzService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MarzService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SyncUsers(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/marznode.MarzService/SyncUsers',
            app_dot_marznode_dot_marznode__pb2.UserData.SerializeToString,
            app_dot_marznode_dot_marznode__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RepopulateUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marznode.MarzService/RepopulateUsers',
            app_dot_marznode_dot_marznode__pb2.UsersData.SerializeToString,
            app_dot_marznode_dot_marznode__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchBackends(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marznode.MarzService/FetchBackends',
            app_dot_marznode_dot_marznode__pb2.Empty.SerializeToString,
            app_dot_marznode_dot_marznode__pb2.BackendsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchUsersStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marznode.MarzService/FetchUsersStats',
            app_dot_marznode_dot_marznode__pb2.Empty.SerializeToString,
            app_dot_marznode_dot_marznode__pb2.UsersStats.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchBackendConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marznode.MarzService/FetchBackendConfig',
            app_dot_marznode_dot_marznode__pb2.Backend.SerializeToString,
            app_dot_marznode_dot_marznode__pb2.BackendConfig.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RestartBackend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marznode.MarzService/RestartBackend',
            app_dot_marznode_dot_marznode__pb2.RestartBackendRequest.SerializeToString,
            app_dot_marznode_dot_marznode__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamBackendLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/marznode.MarzService/StreamBackendLogs',
            app_dot_marznode_dot_marznode__pb2.BackendLogsRequest.SerializeToString,
            app_dot_marznode_dot_marznode__pb2.LogLine.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBackendStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marznode.MarzService/GetBackendStats',
            app_dot_marznode_dot_marznode__pb2.Backend.SerializeToString,
            app_dot_marznode_dot_marznode__pb2.BackendStats.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
